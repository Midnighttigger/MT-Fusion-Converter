import os
from PIL import Image
def Comb(ti,base):
    if (base%2) != 0:
        1/0
    dase = int(base/2)
    f1 = ti.crop((0,0,dase,dase))
    f2 = ti.crop((dase,0,base,dase))
    f3 = ti.crop((base,0,dase*3,dase))
    f4 = ti.crop((dase*3,0,base*2,dase))
    f5 = ti.crop((base*2,0,dase*5,dase))
    f6 = ti.crop((dase*5,0,base*3,dase))
    f7 = ti.crop((base*3,0,dase*7,dase))
    f8 = ti.crop((dase*7,0,base*4,dase))
    f9 = ti.crop((base*4,0,dase*9,dase))
    f10 = ti.crop((dase*9,0,base*5,dase))
    f11 = ti.crop((0,dase,dase,base))
    f12 = ti.crop((dase,dase,base,base))
    f13 = ti.crop((base,dase,dase*3,base))
    f14 = ti.crop((dase*3,dase,base*2,base))
    f15 = ti.crop((base*2,dase,dase*5,base))
    f16 = ti.crop((dase*5,dase,base*3,base))
    f17 = ti.crop((base*3,dase,dase*7,base))
    f18 = ti.crop((dase*7,dase,base*4,base))
    f19 = ti.crop((base*4,dase,dase*9,base))
    f20 = ti.crop((dase*9,dase,base*5,base))
    tf = Image.new("RGBA",(base*8,base*8))
    tf.paste(f1,(0,0))
    tf.paste(f2,(dase,0))
    tf.paste(f1,(base,0))
    tf.paste(f8,(dase*3,0))
    tf.paste(f7,(base*2,0))
    tf.paste(f8,(dase*5,0))
    tf.paste(f7,(base*3,0))
    tf.paste(f2,(dase*7,0))
    tf.paste(f1,(base*4,0))
    tf.paste(f8,(dase*9,0))
    tf.paste(f7,(base*5,0))
    tf.paste(f2,(dase*11,0))
    tf.paste(f5,(base*6,0))
    tf.paste(f10,(dase*13,0))
    tf.paste(f7,(base*7,0))
    tf.paste(f8,(dase*15,0))
    tf.paste(f11,(0,dase))
    tf.paste(f12,(dase,dase))
    tf.paste(f11,(base,dase))
    tf.paste(f18,(dase*3,dase))
    tf.paste(f17,(base*2,dase))
    tf.paste(f18,(dase*5,dase))
    tf.paste(f17,(base*3,dase))
    tf.paste(f12,(dase*7,dase))
    tf.paste(f15,(base*4,dase))
    tf.paste(f20,(dase*9,dase))
    tf.paste(f19,(base*5,dase))
    tf.paste(f16,(dase*11,dase))
    tf.paste(f15,(base*6,dase))
    tf.paste(f20,(dase*13,dase))
    tf.paste(f19,(base*7,dase))
    tf.paste(f20,(dase*15,dase))
    tf.paste(f1,(0,base))
    tf.paste(f2,(dase,base))
    tf.paste(f1,(base,base))
    f1.close()
    tf.paste(f8,(dase*3,base))
    tf.paste(f7,(base*2,base))
    tf.paste(f8,(dase*5,base))
    tf.paste(f7,(base*3,base))
    tf.paste(f2,(dase*7,base))
    f2.close()
    tf.paste(f5,(base*4,base))
    tf.paste(f10,(dase*9,base))
    tf.paste(f9,(base*5,base))
    tf.paste(f6,(dase*11,base))
    tf.paste(f9,(base*6,base))
    tf.paste(f10,(dase*13,base))
    tf.paste(f9,(base*7,base))
    tf.paste(f6,(dase*15,base))
    tf.paste(f15,(0,dase*3))
    tf.paste(f16,(dase,dase*3))
    tf.paste(f15,(base,dase*3))
    tf.paste(f14,(dase*3,dase*3))
    tf.paste(f13,(base*2,dase*3))
    tf.paste(f14,(dase*5,dase*3))
    tf.paste(f13,(base*3,dase*3))
    tf.paste(f16,(dase*7,dase*3))
    tf.paste(f11,(base*4,dase*3))
    tf.paste(f18,(dase*9,dase*3))
    tf.paste(f17,(base*5,dase*3))
    tf.paste(f12,(dase*11,dase*3))
    tf.paste(f17,(base*6,dase*3))
    tf.paste(f18,(dase*13,dase*3))
    tf.paste(f19,(base*7,dase*3))
    tf.paste(f16,(dase*15,dase*3))
    tf.paste(f5,(0,base*2))
    tf.paste(f6,(dase,base*2))
    tf.paste(f5,(base,base*2))
    tf.paste(f4,(dase*3,base*2))
    tf.paste(f3,(base*2,base*2))
    tf.paste(f4,(dase*5,base*2))
    tf.paste(f3,(base*3,base*2))
    tf.paste(f6,(dase*7,base*2))
    tf.paste(f5,(base*4,base*2))
    tf.paste(f4,(dase*9,base*2))
    tf.paste(f7,(base*5,base*2))
    tf.paste(f8,(dase*11,base*2))
    tf.paste(f5,(base*6,base*2))
    tf.paste(f10,(dase*13,base*2))
    tf.paste(f7,(base*7,base*2))
    f7.close()
    tf.paste(f8,(dase*15,base*2))
    f8.close()
    tf.paste(f15,(0,dase*5))
    tf.paste(f16,(dase,dase*5))
    tf.paste(f15,(base,dase*5))
    tf.paste(f14,(dase*3,dase*5))
    tf.paste(f13,(base*2,dase*5))
    tf.paste(f14,(dase*5,dase*5))
    tf.paste(f13,(base*3,dase*5))
    tf.paste(f16,(dase*7,dase*5))
    tf.paste(f15,(base*4,dase*5))
    tf.paste(f20,(dase*9,dase*5))
    tf.paste(f19,(base*5,dase*5))
    tf.paste(f14,(dase*11,dase*5))
    tf.paste(f15,(base*6,dase*5))
    f15.close()
    tf.paste(f14,(dase*13,dase*5))
    tf.paste(f13,(base*7,dase*5))
    tf.paste(f20,(dase*15,dase*5))
    tf.paste(f5,(0,base*3))
    tf.paste(f6,(dase,base*3))
    tf.paste(f5,(base,base*3))
    f5.close()
    tf.paste(f4,(dase*3,base*3))
    tf.paste(f3,(base*2,base*3))
    tf.paste(f4,(dase*5,base*3))
    tf.paste(f3,(base*3,base*3))
    tf.paste(f6,(dase*7,base*3))
    tf.paste(f3,(base*4,base*3))
    tf.paste(f10,(dase*9,base*3))
    tf.paste(f9,(base*5,base*3))
    tf.paste(f6,(dase*11,base*3))
    tf.paste(f9,(base*6,base*3))
    tf.paste(f4,(dase*13,base*3))
    tf.paste(f3,(base*7,base*3))
    tf.paste(f6,(dase*15,base*3))
    f6.close()
    tf.paste(f11,(0,dase*7))
    tf.paste(f12,(dase,dase*7))
    tf.paste(f11,(base,dase*7))
    f11.close()
    tf.paste(f18,(dase*3,dase*7))
    tf.paste(f17,(base*2,dase*7))
    tf.paste(f18,(dase*5,dase*7))
    tf.paste(f17,(base*3,dase*7))
    tf.paste(f12,(dase*7,dase*7))
    f12.close()
    tf.paste(f17,(base*4,dase*7))
    tf.paste(f18,(dase*9,dase*7))
    tf.paste(f13,(base*5,dase*7))
    tf.paste(f16,(dase*11,dase*7))
    tf.paste(f17,(base*6,dase*7))
    f17.close()
    tf.paste(f18,(dase*13,dase*7))
    f18.close()
    tf.paste(f19,(base*7,dase*7))
    tf.paste(f16,(dase*15,dase*7))
    f16.close()
    tf.paste(f9,(0,base*4))
    tf.paste(f4,(dase,base*4))
    tf.paste(f9,(base,base*4))
    tf.paste(f10,(dase*3,base*4))
    tf.paste(f9,(base*2,base*4))
    tf.paste(f4,(dase*5,base*4))
    tf.paste(f9,(base*3,base*4))
    tf.paste(f10,(dase*7,base*4))
    tf.paste(f9,(base*4,base*4))
    tf.paste(f10,(dase*9,base*4))
    tf.paste(f9,(base*5,base*4))
    tf.paste(f10,(dase*11,base*4))
    tf.paste(f3,(base*6,base*4))
    tf.paste(f4,(dase*13,base*4))
    tf.paste(f3,(base*7,base*4))
    tf.paste(f4,(dase*15,base*4))
    tf.paste(f13,(0,dase*9))
    tf.paste(f20,(dase,dase*9))
    tf.paste(f19,(base,dase*9))
    tf.paste(f20,(dase*3,dase*9))
    tf.paste(f19,(base*2,dase*9))
    tf.paste(f14,(dase*5,dase*9))
    tf.paste(f13,(base*3,dase*9))
    tf.paste(f14,(dase*7,dase*9))
    tf.paste(f19,(base*4,dase*9))
    tf.paste(f14,(dase*9,dase*9))
    tf.paste(f13,(base*5,dase*9))
    tf.paste(f20,(dase*11,dase*9))
    tf.paste(f13,(base*6,dase*9))
    tf.paste(f20,(dase*13,dase*9))
    tf.paste(f19,(base*7,dase*9))
    tf.paste(f14,(dase*15,dase*9))
    tf.paste(f3,(0,base*5))
    tf.paste(f10,(dase,base*5))
    tf.paste(f3,(base*2,base*5))
    tf.paste(f4,(dase*5,base*5))
    tf.paste(f3,(base*3,base*5))
    tf.paste(f10,(dase*7,base*5))
    tf.paste(f9,(base*4,base*5))
    tf.paste(f4,(dase*9,base*5))
    tf.paste(f3,(base*5,base*5))
    tf.paste(f10,(dase*11,base*5))
    tf.paste(f3,(base*6,base*5))
    f3.close()
    tf.paste(f10,(dase*13,base*5))
    f10.close()
    tf.paste(f9,(base*7,base*5))
    f9.close()
    tf.paste(f4,(dase*15,base*5))
    f4.close()
    tf.paste(f19,(0,dase*11))
    tf.paste(f14,(dase,dase*11))
    tf.paste(f19,(base*2,dase*11))
    tf.paste(f20,(dase*5,dase*11))
    tf.paste(f13,(base*3,dase*11))
    tf.paste(f20,(dase*7,dase*11))
    tf.paste(f19,(base*4,dase*11))
    tf.paste(f20,(dase*9,dase*11))
    tf.paste(f19,(base*5,dase*11))
    f19.close()
    tf.paste(f20,(dase*11,dase*11))
    f20.close()
    tf.paste(f13,(base*6,dase*11))
    tf.paste(f14,(dase*13,dase*11))
    tf.paste(f13,(base*7,dase*11))
    f13.close()
    tf.paste(f14,(dase*15,dase*11))
    f14.close()
    return tf
f = os.listdir("import/")
for i in range(len(f)):
    index = f[i]
    try:
        tsetup = open("import/" + index + "/setup.txt","r")
        importtype = int(tsetup.readline().strip())
        exporttype = int(tsetup.readline().strip())
        base = int(tsetup.readline().strip())
        tsetup.close()
        if base == 0:
            1/0
        print(format(importtype) + " " + format(exporttype) + " " + format(base))
        if importtype == 1:
            tf = Image.open("import/" + index + "/1.png")
        elif importtype == 2:
            ti = Image.open("import/" + index + "/1.png")
            tf = Comb(ti,base)
            ti.close()
        elif importtype == 4:
            t1 = Image.open("import/" + index + "/1.png")
            tz = Image.open("import/" + index + "/2.png")
            ti = Image.new("RGBA",(base*5,base))
            ti.paste(t1,(0,0))
            t1.close()
            t2 = tz.crop((0,0,base,base))
            ti.paste(t2,(base,0))
            t2.close()
            t3 = tz.crop((base,0,base*2,base))
            ti.paste(t3,(base*2,0))
            t3.close()
            t4 = tz.crop((0,base,base,base*2))
            ti.paste(t4,(base*3,0))
            t4.close()
            t5 = tz.crop((base,base,base*2,base*2))
            tz.close()
            ti.paste(t5,(base*4,0))
            t5.close()
            tf = Comb(ti,base)
            ti.close()
        elif importtype == 5:
            ti = Image.new("RGBA",(base*5,base))
            t1 = Image.open("import/" + index + "/0.png")
            ti.paste(t1,(0,0))
            t1.close()
            t2 = Image.open("import/" + index + "/1.png")
            ti.paste(t2,(base,0))
            t2.close()
            t3 = Image.open("import/" + index + "/2.png")
            ti.paste(t3,(base*2,0))
            t3.close()
            t4 = Image.open("import/" + index + "/3.png")
            ti.paste(t4,(base*3,0))
            t4.close()
            t5 = Image.open("import/" + index + "/4.png")
            ti.paste(t5,(base*4,0))
            t5.close()
            tf = Comb(ti,base)
            ti.close()
        else:
            print("Importtype " + format(importtype) + " is invalid which is in index " + format(index))
        if exporttype == 1:
            try:
                os.mkdir("export/" + index)
            except:
                print("folder export/" + index + " already exists")
            tf.save("export/" + index + "/1.png")
            tf.close()
        elif exporttype == 2:
            try:
                os.mkdir("export/" + index)
            except:
                print("folder export/" + index + " already exists")
            txf = Image.new("RGBA",(base*5,base))
            tx1 = tf.crop((0,0,base,base))
            txf.paste(tx1,(0,0))
            tx1.close()
            tx2 = tf.crop((base*2,base*2,base*3,base*3))
            txf.paste(tx2,(base,0))
            tx2.close()
            tx3 = tf.crop((0,base*2,base,base*3))
            txf.paste(tx3,(base*2,0))
            tx3.close()
            tx4 = tf.crop((base*2,0,base*3,base))
            txf.paste(tx4,(base*3,0))
            tx4.close()
            tx5 = tf.crop((base,base*4,base*2,base*5))
            tf.close()
            txf.paste(tx5,(base*4,0))
            tx5.close()
            txf.save("export/" + index + "/1.png")
            txf.close()
        elif exporttype == 4:
            try:
                os.mkdir("export/" + index)
            except:
                print("folder export/" + index + " already exists")
            tx1 = tf.crop((0,0,base,base))
            tx1.save("export/" + index + "/1.png")
            tx1.close()
            txf = Image.new("RGBA",(base*2,base*2))
            tx2 = tf.crop((base*2,base*2,base*3,base*3))
            txf.paste(tx2,(0,0))
            tx2.close()
            tx3 = tf.crop((0,base*2,base,base*3))
            txf.paste(tx3,(base,0))
            tx3.close()
            tx4 = tf.crop((base*2,0,base*3,base))
            txf.paste(tx4,(0,base))
            tx4.close()
            tx5 = tf.crop((base,base*4,base*2,base*5))
            tf.close()
            txf.paste(tx5,(base,base))
            tx5.close()
            txf.save("export/" + index + "/2.png")
            txf.close()
        elif exporttype == 5:
            try:
                os.mkdir("export/" + index)
            except:
                print("folder export/" + index + " already exists")
            tx1 = tf.crop((0,0,base,base))
            tx1.save("export/" + index + "/0.png")
            tx1.close()
            tx2 = tf.crop((base*2,base*2,base*3,base*3))
            tx2.save("export/" + index + "/1.png")
            tx2.close()
            tx3 = tf.crop((0,base*2,base,base*3))
            tx3.save("export/" + index + "/2.png")
            tx3.close()
            tx4 = tf.crop((base*2,0,base*3,base))
            tx4.save("export/" + index + "/3.png")
            tx4.close()
            tx5 = tf.crop((base,base*4,base*2,base*5))
            tx5.save("export/" + index + "/4.png")
            tx5.close()
            tf.close()
        else:
            print("Exporttype " + format(exporttype) + " is invalid which is in index " + format(index))
    except Exception as texception:
        print(texception)